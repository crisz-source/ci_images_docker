name: Build em imagens docker e adicionado ao github com uma pipeline


on:
  # pull_request:
  #   branches: [ "main" ]
  push:
    branches: [ "main" ]

jobs:
  publish_images:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4


      # Login no Docker Hub
      - name: Login no Docker Hub
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        run: |
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # Gerenciar versionamento automático
      # - name: Incrementar versão global
      #   run: |
      #     chmod +x ./test_increment.sh
      #     ./test_increment.sh

      - name: Incrementar versão global
        run: |
          chmod +x ./test_increment.sh
          ./test_increment.sh
          echo "Antes da execução do script:"
          cat version.txt  # Verifica o conteúdo antes de executar o script
          ./test_increment.sh
          echo "Depois da execução do script:"
          cat version.txt  # Verifica o conteúdo após executar o script
          

      # Obter a versão do arquivo version.txt
      - name: Definir versão
        id: version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Build das imagens com a versão incrementada
      - name: Build das imagens
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/rancher:backend-php-prod-${{ env.VERSION }} -f ./api/Dockerfile .
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/rancher:frontend-angular-prod-${{ env.VERSION }} -f ./front-end-nextjs/Dockerfile .

      # Push das imagens para o Docker Hub
      - name: Push para o Docker Hub
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        run: |
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/rancher:backend-php-prod-${{ env.VERSION }}
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/rancher:frontend-angular-prod-${{ env.VERSION }}

  # Novo Job para Commit da Versão Atualizada após o Build
  commit_version:
    runs-on: ubuntu-latest
    needs: publish_images  # Este job só vai rodar após a conclusão do job anterior

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          ref: main # usar em casos de push
          fetch-depth: 0  # Garantir que o repositório tenha o histórico completo

      # - name: Commit versão atualizada | >>> usar em casos de pull request <<<
      #   run: |
      #     git config user.name "${{secrets.GH_USER_NAME}}"
      #     git config user.email "${{secrets.GH_USER_EMAIL}}"
      #     git add version.txt
      #     git diff --cached  # Verifica se há alterações para commit
      #     git commit -m "Atualiza versão para ${{ env.VERSION }}" || echo "Nada para commitar"
      #     git pull origin ${{ github.head_ref || github.ref_name }}  
      #     git push origin HEAD:${{ github.head_ref || github.ref_name }}

      # - name: Commit versão atualizada
      #   run: |
      #     git config user.name "${{secrets.GH_USER_NAME}}"
      #     git config user.email "${{secrets.GH_USER_EMAIL}}"
      #     git add version.txt
      #     git diff --cached  # Verifica se há alterações para commit
      #     git commit -m "Atualiza versão para ${{ env.VERSION }}" || echo "Nada para commitar"
      #     git fetch origin main
      #     git pull --rebase origin main
      #     git push origin HEAD:main  

      - name: Configurar Git para commit
        run: |
          git config user.name "${{secrets.GH_USER_NAME}}"
          git config user.email "${{secrets.GH_USER_EMAIL}}"

      - name: Verificar mudanças no arquivo version.txt
        run: |
          echo "Antes de adicionar version.txt"
          git status  # Verifica o status para garantir que o arquivo foi modificado
          git diff  # Verifica as alterações feitas no arquivo
      - name: Adicionar e commit do version.txt
        run: |
          git add version.txt  # Adiciona o arquivo version.txt ao staging
          git status  # Verifica se o arquivo foi realmente adicionado
          git diff --cached  # Verifica as mudanças que foram registradas no índice
          git commit -m "Atualiza versão para ${{ env.VERSION }}" || echo "Nada para commitar"  # Faz o commit do arquivo
      - name: Sincronizar com a branch main
        run: |
          git fetch origin main  # Garante que a última versão da branch main foi baixada
          git pull origin main --rebase  # Garante que a branch main está atualizada com o repositório remoto
          git push origin HEAD:main  # Push das alterações para a branch main
